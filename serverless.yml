org: jhosepluna
service: estimaciones-api

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false
    slim: true
    strip: false
    pythonBin: python3
    layer:
      name: psycopg2-layer
      description: psycopg2 layer for PostgreSQL connectivity
      compatibleRuntimes:
        - python3.13
  dbPassword: ${env:DB_PASSWORD, 'TempPassword123!'}
  rdsEndpoint: !GetAtt EstimacionesDB.Endpoint.Address

provider:
  name: aws
  runtime: python3.13
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 20
  # VPC configuration will be handled at function level
  iam:
    statements:
      - Effect: Allow
        Action:
          - rds:DescribeDBInstances
          - rds:DescribeDBClusters
          - rds:DescribeDBSubnetGroups
          - rds:DescribeDBSecurityGroups
          - rds:DescribeDBParameterGroups
          - rds:DescribeDBLogFiles
          - rds:DownloadDBLogFilePortion
          - rds:CreateDBInstance
          - rds:ModifyDBInstance
          - rds:DeleteDBInstance
          - rds:CreateDBSnapshot
          - rds:DescribeDBSnapshots
          - rds:DeleteDBSnapshot
          - rds:RestoreDBInstanceFromDBSnapshot
          - rds:RestoreDBInstanceToPointInTime
          - rds:CreateDBParameterGroup
          - rds:ModifyDBParameterGroup
          - rds:DeleteDBParameterGroup
          - rds:CreateDBSecurityGroup
          - rds:ModifyDBSecurityGroup
          - rds:DeleteDBSecurityGroup
          - rds:AuthorizeDBSecurityGroupIngress
          - rds:RevokeDBSecurityGroupIngress
          - rds:CreateDBSubnetGroup
          - rds:ModifyDBSubnetGroup
          - rds:DeleteDBSubnetGroup
          - rds:AddTagsToResource
          - rds:ListTagsForResource
          - rds:RemoveTagsFromResource
        Resource: "*"
      - Effect: Allow
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:AttachNetworkInterface
          - ec2:DetachNetworkInterface
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: "*"
      - Effect: Allow
        Action:
          - cloudformation:*
          - iam:CreateRole
          - iam:DeleteRole
          - iam:GetRole
          - iam:PassRole
          - iam:AttachRolePolicy
          - iam:DetachRolePolicy
          - iam:PutRolePolicy
          - iam:DeleteRolePolicy
          - iam:GetRolePolicy
          - iam:ListRolePolicies
          - iam:ListAttachedRolePolicies
          - lambda:CreateFunction
          - lambda:DeleteFunction
          - lambda:GetFunction
          - lambda:UpdateFunctionCode
          - lambda:UpdateFunctionConfiguration
          - lambda:ListFunctions
          - lambda:AddPermission
          - lambda:RemovePermission
          - lambda:GetPolicy
          - apigateway:*
          - s3:CreateBucket
          - s3:DeleteBucket
          - s3:GetBucketLocation
          - s3:ListBucket
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
        Resource: "*"
  environment:
    DB_HOST: ${self:custom.rdsEndpoint}
    DB_NAME: estimaciones
    DB_USER: estimaciones_user
    DB_PASSWORD: ${self:custom.dbPassword}

functions:
  listar:
    handler: ListarEstimaciones.lambda_handler
    events:
      - http:
          path: /estimaciones/listar
          method: get
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  buscar:
    handler: BuscarEstimacion.lambda_handler
    events:
      - http:
          path: /estimaciones/buscar
          method: post
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  crear:
    handler: CrearEstimacion.lambda_handler
    events:
      - http:
          path: /estimaciones/crear
          method: post
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  modificar:
    handler: ModificarEstimacion.lambda_handler
    events:
      - http:
          path: /estimaciones/modificar
          method: put
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  eliminar:
    handler: EliminarEstimacion.lambda_handler
    events:
      - http:
          path: /estimaciones/eliminar
          method: delete
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

resources:
  Resources:
    # VPC for the application
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: estimaciones-vpc-${self:provider.stage}

    # Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: estimaciones-igw-${self:provider.stage}

    # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    # Public Subnet 1
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: estimaciones-public-subnet-1-${self:provider.stage}

    # Public Subnet 2
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: estimaciones-public-subnet-2-${self:provider.stage}

    # Private Subnet 1
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: 10.0.3.0/24
        Tags:
          - Key: Name
            Value: estimaciones-private-subnet-1-${self:provider.stage}

    # Private Subnet 2
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: 10.0.4.0/24
        Tags:
          - Key: Name
            Value: estimaciones-private-subnet-2-${self:provider.stage}

    # Route Table for Public Subnets
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: estimaciones-public-rt

    # Route Table for Private Subnets
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: estimaciones-private-rt

    # Default route for public subnets
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    # Associate public subnets with public route table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    # Associate private subnets with private route table
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    # Security Group for RDS
    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS database
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
        Tags:
          - Key: Name
            Value: estimaciones-rds-sg

    # Security Group for Lambda functions
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            DestinationSecurityGroupId: !Ref RDSSecurityGroup
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: estimaciones-lambda-sg

    # DB Subnet Group
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS database
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: estimaciones-db-subnet-group

    # RDS Instance
    EstimacionesDB:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: estimaciones-db-${self:provider.stage}
        DBName: estimaciones
        DBInstanceClass: db.t3.micro
        Engine: postgres
        EngineVersion: '13.22'
        MasterUsername: estimaciones_user
        MasterUserPassword: ${self:custom.dbPassword}
        AllocatedStorage: 20
        StorageType: gp2
        BackupRetentionPeriod: 7
        MultiAZ: false
        PubliclyAccessible: false
        StorageEncrypted: false
        DeletionProtection: false
        VPCSecurityGroups:
          - !Ref RDSSecurityGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        Tags:
          - Key: Name
            Value: estimaciones-db-${self:provider.stage}

    # Custom Resource to run database schema
    DatabaseInitializer:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken: !GetAtt DatabaseInitializerFunction.Arn
        DBHost: !GetAtt EstimacionesDB.Endpoint.Address
        DBPort: !GetAtt EstimacionesDB.Endpoint.Port
        DBName: estimaciones
        DBUser: estimaciones_user
        DBPassword: ${self:custom.dbPassword}

    # IAM Role for Database Initializer Function
    DatabaseInitializerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: RDSAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - rds:DescribeDBInstances
                    - rds:DescribeDBClusters
                    - rds:Connect
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AttachNetworkInterface
                    - ec2:DetachNetworkInterface
                    - ec2:DescribeVpcs
                    - ec2:DescribeSubnets
                    - ec2:DescribeSecurityGroups
                  Resource: "*"

    # Lambda function for database initialization
    DatabaseInitializerFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: estimaciones-db-initializer-${self:provider.stage}
        Runtime: python3.13
        Handler: index.lambda_handler
        Role: !GetAtt DatabaseInitializerRole.Arn
        Timeout: 300
        VpcConfig:
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
        Layers:
          - arn:aws:lambda:us-east-1:946503249480:layer:psycopg2-py38:1
        Code:
          ZipFile: |
            import json
            import boto3
            import psycopg2
            import os
            import time
            from urllib.parse import unquote

            def lambda_handler(event, context):
                print(f"Event: {json.dumps(event)}")
                
                db_host = event['ResourceProperties']['DBHost']
                db_port = event['ResourceProperties']['DBPort']
                db_name = event['ResourceProperties']['DBName']
                db_user = event['ResourceProperties']['DBUser']
                db_password = event['ResourceProperties']['DBPassword']
                
                schema_sql = get_schema_sql()
                
                try:
                    conn = psycopg2.connect(
                        host=db_host,
                        port=db_port,
                        database=db_name,
                        user=db_user,
                        password=db_password
                    )
                    
                    with conn.cursor() as cursor:
                        cursor.execute(schema_sql)
                        conn.commit()
                    
                    print("Database schema executed successfully")
                    send_response(event, context, "SUCCESS", {
                        "Message": "Database schema initialized successfully"
                    })
                    
                except Exception as e:
                    print(f"Error initializing database: {str(e)}")
                    send_response(event, context, "FAILED", {
                        "Message": f"Database initialization failed: {str(e)}"
                    })
                
                finally:
                    if 'conn' in locals():
                        conn.close()

            def get_schema_sql():
                return """
                CREATE TABLE IF NOT EXISTS estimacion (
                    id SERIAL PRIMARY KEY,
                    num_viviendas INTEGER DEFAULT 0,
                    num_comercios INTEGER DEFAULT 0,
                    num_industrias INTEGER DEFAULT 0,
                    num_educacion INTEGER DEFAULT 0,
                    num_salud INTEGER DEFAULT 0,
                    num_religion INTEGER DEFAULT 0,
                    num_estacionamientos INTEGER DEFAULT 0,
                    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE INDEX IF NOT EXISTS idx_estimacion_fecha_creacion ON estimacion(fecha_creacion);
                CREATE INDEX IF NOT EXISTS idx_estimacion_fecha_modificacion ON estimacion(fecha_modificacion);
                """

            def send_response(event, context, status, data):
                response_url = event['ResponseURL']
                response_body = {
                    'Status': status,
                    'Reason': f'See CloudWatch logs for details: {context.log_group_name}',
                    'PhysicalResourceId': context.log_stream_name,
                    'StackId': event['StackId'],
                    'RequestId': event['RequestId'],
                    'LogicalResourceId': event['LogicalResourceId'],
                    'Data': data
                }
                json_response_body = json.dumps(response_body)
                headers = {
                    'content-type': '',
                    'content-length': str(len(json_response_body))
                }
                try:
                    import urllib3
                    http = urllib3.PoolManager()
                    response = http.request('PUT', response_url, body=json_response_body, headers=headers)
                    print(f"Status code: {response.status}")
                except Exception as e:
                    print(f"Error sending response: {str(e)}")
        Environment:
          Variables:
            DB_HOST: !GetAtt EstimacionesDB.Endpoint.Address
            DB_PORT: !GetAtt EstimacionesDB.Endpoint.Port
            DB_NAME: estimaciones
            DB_USER: estimaciones_user
            DB_PASSWORD: ${self:custom.dbPassword}

  Outputs:
    DatabaseEndpoint:
      Description: RDS instance endpoint
      Value: !GetAtt EstimacionesDB.Endpoint.Address
      Export:
        Name: ${self:service}-database-endpoint
    
    DatabasePort:
      Description: RDS instance port
      Value: !GetAtt EstimacionesDB.Endpoint.Port
      Export:
        Name: ${self:service}-database-port
